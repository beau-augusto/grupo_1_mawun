var ViDApp = angular.module('ViDApp', ['cfp.hotkeys', 'ui.bootstrap']);

ViDApp.config(function (hotkeysProvider) {
  // reset hotkeys to match Sv5 Hotkey Menu;
  hotkeysProvider.cheatSheetHotkey = 'ctrl+k';
});

ViDApp.controller('ViDCtrl', ['$window',
                              '$location',
                              '$scope',
                              '$timeout',
                              'hotkeys',
                              'alertService',
                              'dataService',
                              'domService',
                              'descriptionService',
                              'findReplaceService',
                              'instructionService',
                              'snippetService',
                              'mediaService',
                              'messageService',
                              'noteService',
                              'phoneticSpellingService',
                              'researchService',
                              'saveService',
                              'stringService',
                              'transcriptService',
                              'videoService',

  function($window,
           $location,
           $scope,
           $timeout,
           hotkeys,
           alertService,
           dataService,
           domService,
           descriptionService,
           findReplaceService,
           instructionService,
           snippetService,
           mediaService,
           messageService,
           noteService,
           phoneticSpellingService,
           researchService,
           saveService,
           stringService,
           transcriptService,
           videoService) {

    $scope.hotkeys = hotkeys;
    $scope.alertService = alertService;
    $scope.dataService = dataService;
    $scope.descriptionService = descriptionService;
    $scope.findReplaceService = findReplaceService;
    $scope.domService = domService;
    $scope.instructionService = instructionService;
    $scope.mediaService = mediaService;
    $scope.messageService = messageService;
    $scope.noteService = noteService;
    $scope.researchService = researchService;
    $scope.saveService = saveService;
    $scope.snippetService = snippetService;
    $scope.stringService = stringService;
    $scope.transcriptService = transcriptService;
    $scope.videoService = videoService;
    $scope.cmdKey = /mac/i.test(navigator.platform) ? 'cmd' : 'ctrl';

    $scope.init = function() {
      $scope.initWatchers();
      saveService.getData();
      researchService.initClocks();
      domService.initListeners();
      phoneticSpellingService.initListeners();
      videoService.initializeVolume();
      $scope.initHotkeys();
      var that = this;
      window.onbeforeunload = function(){
        if (_.some(that.dataService.descriptions, function(desc) {return desc.dirty})) {
          return true;
        }
      };
    }

    $scope.sourceUrl = function(desc) {
      return desc.snippet.audioSourceUrl;
    }

    $scope.initWatchers = function() {
      $scope.$watch(function() {
        return descriptionService.currentDescriptionIndex;
      }, function (newValue, oldValue, scope) {
        $("#desc-"+newValue).focus();
        var currDesc = descriptionService.currentDescription();
      });
    }

    $scope.pageChanged = function(newPage, oldPage){
      dataService.transcript.newPage = newPage;
      dataService.transcript.oldPage = oldPage;
      var base = $location.absUrl().split('?')[0]
      var params = '?page=' + dataService.transcript.newPage;
      var url = base + params;
      var options = {
        runValidations: true,
        redirectToUrl: url
      }
      this.saveService.saveJob(options);
    }

    $scope.changeCurrentPage = function(ms) {
      if (dataService.transcript.numPages == null || dataService.transcript.numPages == 1) { return false; }
      var time = ms / 60000;
      var pageRanges = _.times(dataService.transcript.numPages, function(pageNumber) {
        var startTime = pageNumber * dataService.transcript.minPerPage;
        var endTime = startTime + dataService.transcript.minPerPage;
        return {pageNumber: pageNumber + 1, startTime: startTime, endTime: endTime};
      })
      var pageInfo = _.find(pageRanges, function(pageInfo) {
        return pageInfo.startTime <= time && time <= pageInfo.endTime;
      })
      if (pageInfo) {
        var newPage = pageInfo.pageNumber;
        var oldPage = dataService.transcript.currentPage;
        dataService.transcript.currentPage = newPage;
        this.pageChanged(newPage, oldPage);
      };
    }

    $scope.addDescription = function(ms, extended) {
      ms = _.isNumber(ms) ? ms : videoService.position();
      extended = extended || false;
      researchService.resetEditClockActive();
      var time =  _.round(ms);
      if (dataService.transcript.startTime <= time && time < dataService.transcript.endTime) {
        var newDesc = {
          startTime: time,
          previousStartTime: time,
          text: '',
          gapIndex: transcriptService.findDescriptionGapIndex(time),
          id: dataService.generateNewDescId(),
          originalData: null,
          dirty: true,
          extended: extended,
          extendedControlsAvailable: extended,
          snippet: {},
          snippetStatus: 'empty',
          snipPlayerState: 'stopped'
        };
        var futureIndex = 0;
        descriptionService.setEndTime(newDesc, time);
        _.each(dataService.descriptions, function(desc, ii) {
          if (newDesc.startTime > parseInt(desc.startTime, 10)) {
            futureIndex = ii + 1;
            return;
          }
        });
        newDesc.index = futureIndex;
        dataService.descriptions.splice(futureIndex, 0, newDesc);
        dataService.reindexDescriptions();
        //console.log("futureIndex" + futureIndex);
        // this is bad and we should all feel bad.
        // make sure we change currentDescriptionIndex after the re-indexed descriptions
        // are rendered to avoid conflict with the description's ng-focus function
        setTimeout(function(){
          $scope.$apply(function () {
            descriptionService.currentDescriptionIndex = futureIndex;
          });
        }, 0);
      } else {
        alertService.addAlert('Failure', "You cannot add a description outside the bounds of the transcript start and end.");
      }
    }

    $scope.handleSnippetRefresh = function(desc, $event) {
      snippetService.sendSnippet(desc, dataService.descriptions, dataService.transcriptGaps, $event)
      descriptionService.setCurrentIndex(desc.index);
    }

    $scope.handleDescKeyup = function(desc) {
      researchService.resetEditClockActive();
      if (!desc.extended) {descriptionService.setDurationEstimate(desc)};
      descriptionService.markIfDirty(desc);
      descriptionService.broadcastDescUpdate(desc);
    }

    $scope.handleTranscriptCellClick = function(ms, $event){
      descriptionService.currentDescriptionIndex = null;
      desc = descriptionService.findDescription(ms);
      if (desc != null) {
        descriptionService.currentDescriptionIndex = desc.index;
      } else if($event.altKey){
        $scope.addDescription(parseInt($(event.target).attr('m'),10));
      }
    }

    $scope.playCurrentDescription = function(){
      if (descriptionService.currentDescriptionIndex !== null) {
        var desc = descriptionService.currentDescription();
        mediaService.playFromDesc(desc);
      } else {
        videoService.toggleVideoPlay();
      }
    }

    $scope.toggleExtendedControls = function(desc) {
      descriptionService.setExtendedControls(desc, !desc.extendedControlsAvailable);
    }

    $scope.nudgeTime = function(desc, direction) {
      const playbackStateBeforeNudging = videoService.state();
      descriptionService.nudge(desc, direction)
      videoService.seek(desc.startTime);
      if (playbackStateBeforeNudging === 'PAUSED') {videoService.pauseVideo();}
    }

    $scope.nudgeEndTime = function(desc, direction){
      descriptionService.nudgeEndTime(desc, direction)
    }

    $scope.initHotkeys = function() {
      hotkeys.add({
        combo: 'ctrl+space',
        description: 'Play / Pause Video',
        allowIn: ['TEXTAREA'],
        callback: function(e) {
          e.preventDefault();
          researchService.resetEditClockActive();
          videoService.toggleVideoPlay();
        }
      });

      hotkeys.add({
        combo: 'ctrl+k',
        description: 'Toggle Cheat Sheet',
        allowIn: ['TEXTAREA'],
        callback: function(e) {
          $scope.hotkeys.toggleCheatSheet();
        }
      });

      hotkeys.add({
        combo: 'shift+space',
        description: 'Play from Current Description Start Time',
        allowIn: ['TEXTAREA'],
        callback: function(e) {
          e.preventDefault();
          $scope.playCurrentDescription();
        }
      });

      hotkeys.add({
        combo: 'ctrl+backspace',
        description: 'Delete Current Focused Description',
        allowIn: ['TEXTAREA'],
        callback: function(e) {
          e.preventDefault();
          var uglyId = e.target.id;
          var result = uglyId.match(/desc-(\d+)/);
          if (!_.isEmpty(result)) {descriptionService.openDeleteDescriptionModal(result[1]); }
        }
      });

      hotkeys.add({
        combo: 'ctrl+a',
        description: 'Create New Description',
        allowIn: ['TEXTAREA'],
        callback: function(e) {
          e.preventDefault();
          researchService.resetEditClockActive();
          $scope.addDescription();
        }
      });

      hotkeys.add({
        combo: 'ctrl+s',
        description: 'Save Descriptions',
        allowIn: ['TEXTAREA'],
        callback: function(e) {
          e.preventDefault();
          researchService.resetEditClockActive();
          saveService.saveJob();
        }
      });

      hotkeys.add({
        combo: 'shift+up',
        description: 'Move Up One Description',
        allowIn: ['TEXTAREA'],
        callback: function(e) {
          e.preventDefault();
          researchService.resetEditClockActive();
          descriptionService.currentDescriptionIndex = _.max([descriptionService.currentDescriptionIndex - 1, 0]);
        }
      });

      hotkeys.add({
        combo: 'shift+down',
        description: 'Move Down One Description',
        allowIn: ['TEXTAREA'],
        callback: function(e) {
          e.preventDefault();
          researchService.resetEditClockActive();
          var maxIndex = dataService.descriptions.length - 1;
          descriptionService.currentDescriptionIndex = _.min([descriptionService.currentDescriptionIndex + 1, maxIndex]);
        }
      });

      hotkeys.add({
        combo: 'shift+right',
        description: 'Nudge Current Description Time Forward',
        allowIn: ['TEXTAREA'],
        callback: function(e) {
          e.preventDefault();
          researchService.resetEditClockActive();
          $scope.nudgeTime(descriptionService.currentDescription(), 'forward');
        }
      });

      hotkeys.add({
        combo: 'shift+left',
        description: 'Nudge Current Description Time Backward',
        allowIn: ['TEXTAREA'],
        callback: function(e) {
          e.preventDefault();
          researchService.resetEditClockActive();
          $scope.nudgeTime(descriptionService.currentDescription(), 'back');
        }
      });

      hotkeys.add({
        combo: 'alt+down',
        description: 'Slow down video playback speed',
        allowIn: ['TEXTAREA'],
        callback: function(e) {
          e.preventDefault();
          researchService.resetEditClockActive();
          if (dataService.playbackRate - 0.1 >= 0.5){
            dataService.playbackRate  = dataService.playbackRate - 0.1;
            videoService.changePlaybackRate(dataService.playbackRate);
          }
        }
      });

      hotkeys.add({
        combo: 'alt+up',
        description: 'Speed up video playback speed',
        allowIn: ['TEXTAREA'],
        callback: function(e) {
          e.preventDefault();
          if (dataService.playbackRate + 0.1 <= 2.0){
            dataService.playbackRate  = dataService.playbackRate + 0.1;
            videoService.changePlaybackRate(dataService.playbackRate);
          }
        }
      });

      hotkeys.add({
        combo: 'ctrl+shift+right',
        description: 'One Frame Forwards',
        allowIn: ['TEXTAREA'],
        callback: function(e) {
          e.preventDefault();
          researchService.resetEditClockActive();
          videoService.seekForward();
        }
      });

      hotkeys.add({
        combo: 'ctrl+shift+left',
        description: 'One Frame Backwards',
        allowIn: ['TEXTAREA'],
        callback: function(e) {
          e.preventDefault();
          researchService.resetEditClockActive();
          videoService.seekBack();
        }
      });

      hotkeys.add({
        combo: 'ctrl+b',
        description: 'Add Phonetic Spelling',
        allowIn: ['TEXTAREA'],
        callback: function(e) {
          e.preventDefault();
          var selectionData = {
            startIndex: null,
            endIndex: null,
            selectedText: null,
            originalText: null,
            fullText: null,
            descId: null
          }
          var $txtarea = e.target;
          selectionData.startIndex = $txtarea.selectionStart;
          selectionData.endIndex = $txtarea.selectionEnd;
          if (selectionData.startIndex === selectionData.endIndex) { return; }
          selectionData.originalText = window.getSelection().toString();
          selectionData.selectedText = _.trim(selectionData.originalText);
          selectionData.fullText = $txtarea.value;
          selectionData.descId =  e.target.id.match(/desc-(\d+)/)[1];
          phoneticSpellingService.openEditInterface(selectionData);
        }
      });
    }

    $scope.init();
  }
]);
