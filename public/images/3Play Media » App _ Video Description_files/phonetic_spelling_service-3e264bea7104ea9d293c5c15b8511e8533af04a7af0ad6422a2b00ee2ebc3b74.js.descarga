var app = angular.module('ViDApp');
app.service('phoneticSpellingService', ['$http',
                                        '$rootScope',
                                        '$uibModal',
                                        'alertService',
                                        'dataService',
                                        'descriptionService',
  function(
    $http,
    $rootScope,
    $uibModal,
    alertService,
    dataService,
    descriptionService) {

  this.alertService = alertService;
  this.dataService = dataService;

  this.initListeners = function() {
    var that = this;
    $rootScope.$on('snippet-synthesized', function (event, desc) {
      var phoneticHits = that.parseTextForArpa(desc.text);
      that.addHitsToSuggestions(phoneticHits);
    });
  }

  this.parseAndSetSuggestions = function() {
    // parse suggestions and set to dataservice
    var phoneticHits = [];
    var that = this;
    _.each(dataService.descriptions, function(desc) {
      phoneticHits = _.concat(phoneticHits, that.parseTextForArpa(desc.text));
    })
    this.addHitsToSuggestions(phoneticHits);
  }

  this.openEditInterface = function(selectionData) {
    this.selection = selectionData;
    this.phoneticSpelling = '';
    this.replacementText = '';
    this.sourceUrl = '';
    this.snippet = '';
    this.snippetStatus = 'error';
    this.handlePhoneticSpellingChange();
    this.openModal()
  }

  this.synthesizeAudio = function() {
    // todo: synthesize ghost snippet from phonetic spelling, set sourceUrl
    if (this.replacementText === '') { return; }
    var that = this;

    var requestData = {
      id: null,
      desc_id: null,
      start_time: null,
      end_time: null,
      text: this.replacementText,
      job_id: dataService.job.id
    }
    this.snippet = {};
    this.snippetStatus = 'pending';

    var url = dataService.job.id + '/audio_snippets';
    $http({ url: url,
      method: "POST",
      data: requestData
    }).then(function successCallback(response) {
      if (that.replacementText !== response.data.snippet.text) {
        that.snippetStatus = 'error';
        return;
      }
      audio_snip = that.dataService.parseSnippet(response.data.snippet);
      that.snippet = audio_snip;
      that.sourceUrl = that.snippet.audioSourceUrl;
      that.snippetStatus = 'complete';
      console.log("Success: ", response.data);
    }, function errorCallback(response) {
      console.log("Error: ", response);
      that.snippetStatus = 'error';
      var errMsg = response.data.message || response.statusText;
      console.log(errMsg)
      that.alertService.addAlert(response.status, errMsg);
    });
  }

  this.parseTextForArpa = function(text) {
    var result;
    var phoneticHits = [];
    var phoneticRegex = /\[([a-zA-Z0-9]*)\]\/([a-zA-Z0-9]*)\//g;
    while (result = phoneticRegex.exec(text)) {
      phoneticHits.push({match: result[1], phonetic: result[2]})
    }
    return phoneticHits;
  }

  this.addHitsToSuggestions = function(phoneticHits) {
    this.dataService.phoneticSuggestions = _(this.dataService.phoneticSuggestions)
      .concat(phoneticHits)
      .uniqBy('phonetic')
      .value();
    return this.dataService.phoneticSuggestions;
  }

  this.findSuggestionsByMatch = function(matchText) {
    var suggestions = _.filter(this.dataService.phoneticSuggestions, function(suggestion) {
      return suggestion.match === matchText;
    })
    return suggestions;
  }

  this.handlePhoneticSpellingChange = function() {
    this.updateReplacementText();
  }

  this.updateReplacementText = function() {
    this.replacementText = '['+  this.selection.selectedText + ']/' + this.phoneticSpelling + '/';
  }

  this.addPhoneme = function(phoneme) {
    this.phoneticSpelling = this.phoneticSpelling + phoneme;
    this.handlePhoneticSpellingChange();
  }

  this.replacePhoneme = function(phoneme) {
    this.phoneticSpelling = phoneme;
    this.handlePhoneticSpellingChange();
  }

  this.insertText = function() {
    this.handlePhoneticSpellingChange();
    var beginningText = this.selection.fullText.substr(0, this.selection.startIndex);
    var endText = this.selection.fullText.substr(this.selection.endIndex);
    var beginDelimiter = this.selection.originalText[0] === ' ' ? ' ' : '';
    var endDelimiter = this.selection.originalText[this.selection.originalText.length-1] === ' ' ? ' ' : '';
    var newFullText = beginningText + beginDelimiter + this.replacementText + endDelimiter + endText;
    var currentDesc = descriptionService.currentDescription();
    currentDesc.text = newFullText;
  }

  this.openModal = function () {
    var title = 'Phonetic Spelling';
    $uibModal.open({
      ariaLabelledBy: 'modal-title-bottom',
      ariaDescribedBy: 'modal-body-bottom',
      templateUrl: 'phonetic-spelling-modal.html',
      size: 'lg',
      resolve: {
        title: function() {
          return title;
        }
      },
      controller: 'PhoneticSpellingModalInstanceCtrl',
      controllerAs: '$ctrl'
    }).result.then(function(){}, function(res){});
  }
}]);
