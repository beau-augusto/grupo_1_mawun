var app = angular.module('ViDApp');
app.service('snippetService', ['$http',
                               '$location',
                               '$rootScope',
                               '$timeout',
                               'alertService',
                               'dataService',
                               'saveService',
                               'descriptionService',
                               '$uibModal',
                               'domService',
function($http,
         $location,
         $rootScope,
         $timeout,
         alertService,
         dataService,
         saveService,
         descriptionService,
         $uibModal,
         domService) {

  this.alertService = alertService;
  this.dataService = dataService;
  this.saveService = saveService;
  this.descriptionService = descriptionService;
  this.domService = domService;

  this.sendSnippet = function(desc, allDescs, transcriptGaps, event){
    var url, method;
    var that = this;
    //if the event that triggers this focus change is a button click, don't send the snippet
    if (event.relatedTarget && event.relatedTarget.type == 'submit') {
      //also ensure the button click is on another description
      if (event.relatedTarget.parentElement.getAttribute('data-description') === desc.id.toString()) {
        return;
      }
    }
    if (desc.text === '') { return; }

    var requestData = this.getSnippetData(desc);
    requestData.descriptions = this.transmuteDescriptions(allDescs);
    requestData.transcript_gaps = transcriptGaps;
    desc.snippet = {};
    desc.snippetStatus = 'pending';
    $http({ url: this.postUrl(),
      method: "POST",
      data: requestData
    }).then(function successCallback(response) {
      if (desc.text !== response.data.snippet.text) {
        desc.snippetStatus = 'error';
        return;
      }
      audio_snip = that.dataService.parseSnippet(response.data.snippet);
      var newEndTime = desc.startTime + audio_snip.duration;
      if (!desc.extendedControlsAvailable) {
        that.descriptionService.setEndTime(desc, newEndTime);
      }
      desc.snippet = audio_snip;
      desc.snippetStatus = 'complete';
      that.descriptionService.computeAndSetExtended(desc);
      that.descriptionService.markIfDirty(desc);
      that.dataService.broadcastSnippetSynthesis(desc);
      that.domService.refreshSurroundingParagraphCellDisplay(desc);
      console.log("Success: ", response.data);
    }, function errorCallback(response) {
      console.log("Error: ", response);
      desc.snippetStatus = 'error';
      var errMsg = response.data.message || response.statusText;
      console.log(errMsg)
      that.alertService.addAlert(response.status, errMsg);
    });
  }

  this.sendBulkSnippets = function(descriptions, allDescs, transcriptGaps){
    var url, method;
    var that = this;

    var bundledData = {}
    bundledData.snippetCollection = _.map(descriptions, function(desc) {
      desc.snippet = {};
      desc.snippetStatus = 'pending';
      var requestData = that.getSnippetData(desc);
      return requestData
    })
    bundledData.descriptions = that.transmuteDescriptions(allDescs)
    bundledData.transcript_gaps = transcriptGaps
    $http({ url: this.postBulkUrl(),
      method: "POST",
      data: bundledData
    }).then(function successCallback(response) {
      _.each(descriptions, function(desc, index) {
        if (desc.text !== response.data[index].snippet.text) {
          desc.snippetStatus = 'error';
          return;
        }
        audio_snip = that.dataService.parseSnippet(response.data[index].snippet);
        var newEndTime = desc.startTime + audio_snip.duration;
        if (!desc.extendedControlsAvailable) {
          that.descriptionService.setEndTime(desc, newEndTime);
        }
        desc.snippet = audio_snip;
        desc.snippetStatus = 'complete';
        that.descriptionService.computeAndSetExtended(desc);
        that.descriptionService.markIfDirty(desc);
        that.dataService.broadcastSnippetSynthesis(desc);
        that.domService.refreshSurroundingParagraphCellDisplay(desc);
      });
      console.log("Success: ", response.data);
      that.saveService.saveJob()
    }, function errorCallback(response) {
      _.each(descriptions, function(desc, index) {
        console.log("Error: ", response);
        desc.snippetStatus = 'error';
      });
      var errMsg = response.data.message || response.statusText;
      console.log(errMsg)
      that.alertService.addAlert(response.status, errMsg);
    });
  }

  this.postUrl = function() {
    return dataService.job.id + '/audio_snippets';
  }

  this.postBulkUrl = function() {
    return dataService.job.id + '/audio_snippets/bulk_create';
  }

  this.putUrl = function(desc) {
    return dataService.job.id + '/audio_snippets/' + desc.snippet.id;
  }

  this.getSnippetData = function(desc){
    var data = {
      id: desc.snippet.id,
      desc_id: desc.id,
      start_time: desc.startTime,
      end_time: desc.endTime,
      text: desc.text,
      job_id: dataService.job.id
    }
    return data;
  }

  this.openResynthesizeModal = function(title, body){
    $uibModal.open({
      ariaLabelledBy: 'modal-title-bottom',
      ariaDescribedBy: 'modal-body-bottom',
      templateUrl: 'resynthesize-modal.html',
      size: 'med',
      resolve: {
        title: function () {
          return title;
        },
        body: function () {
          return body;
        }
      },
      controller: 'ResynthesizeModalInstanceCtrl',
      controllerAs: '$ctrl'
    });
  }

  this.resynthesizeAll = function(){
    var descriptions = []
    _.each(dataService.descriptions, function(desc) {
      if ((desc.snippetStatus === 'error') && (desc.text !== '')){
        descriptions.push(desc)
      }
    })
    var sortedDescriptions = descriptions.sort((a, b) => (a.id > b.id) ? 1 : -1)
    this.sendBulkSnippets(sortedDescriptions, dataService.descriptions, dataService.transcriptGaps)
  }

  this.transmuteDescriptions = function(descs){
    var data = _.map(descs, function(desc) {
      return {
        id: desc.id,
        start_time: desc.startTime,
        end_time: desc.endTime
      }
    });
    return data;
  }
}]);
