var app = angular.module('ViDApp');
app.service('findReplaceService', ['$uibModal',
                                   'dataService',
                                   'descriptionService',
                                   'stringService',
                                   '$timeout',
                                   'mediaService',
                                   'snippetService',
  function(
    $uibModal,
    dataService,
    descriptionService,
    stringService,
    $timeout,
    mediaService,
    snippetService) {

  this.dataService = dataService;
  this.descriptionService = descriptionService;
  this.stringService = stringService;
  this.$timeout = $timeout;
  this.mediaService = mediaService;
  this.snippetService = snippetService;
  this.showMatches = true;
  this.findText = '';
  this.replaceText = '';
  this.widgetActive = false;
  this.ignoreCase = false;
  this.regularExpression = false;
  this.matchedHits = [];

  this.toggleWidget = function() {
    this.widgetActive = !this.widgetActive;
    this.$timeout(function(){
      var inputText = document.getElementById('find-text');
      if (inputText != null) {
        inputText.focus();
      }
    }, 0);
  }

  this.findReplace = function() {
    this.setMatchedHits();
    var match = this.currentMatch();
    if (match) {
      this.descriptionService.setText(match.desc, match.modifiedText);
    }
    this.moveToAdjacentMatch('next');
  }

  this.moveToAdjacentMatch = function(direction) {
    direction = direction || 'next';
    direction === 'next' ? this.incrementCurrentMatchIndex() : this.decrementCurrentMatchIndex();
    if (this.currentMatch()) {
      this.descriptionService.setCurrentIndex(this.currentMatch().desc.index);
    }
  }

  this.incrementCurrentMatchIndex = function() {
    if (this.currentMatchIndex === undefined) {
      this.currentMatchIndex = 0;
      return;
    }
    this.currentMatchIndex = (this.currentMatchIndex + 1) % this.matchedHits.length;
  }

  this.decrementCurrentMatchIndex = function() {
    if (this.currentMatchIndex === undefined || this.currentMatchIndex === 0) {
      this.currentMatchIndex = this.matchedHits.length - 1;
      return;
    }
    this.currentMatchIndex = this.currentMatchIndex - 1;
  }

  this.setMatchedHits = function() {
    if (!_.isEqual(this.findSettings, this.getFindSettings())) {
      this.findSettings = this.getFindSettings();
      this.matchedHits = this.findMatchedHits(this.findText);
      this.currentMatchIndex = undefined;
    }
  }

  this.getFindSettings = function() {
    return {
      findText: this.findText,
      ignoreCase: this.ignoreCase,
      regexp: this.regularExpression
    };
  }

  this.currentMatch = function(){
    return this.matchedHits[this.currentMatchIndex];
  }

  this.findMatchedHits = function(){
    if (!this.findText.length) { return []; }
    var hitDescs = this.findMatchedDescs(this.findText);
    return _.map(hitDescs, (desc) => {
      return {
        desc: desc,
        modifiedText: this.computeReplacementText(desc.text, this.findText, this.replaceText),
        excluded: false
      };
    });
  }

  this.findMatchedDescs = function(matchText) {
    var matchOptions = {ignoreCase: this.ignoreCase, regularExpression: this.regularExpression}
    return _.filter(this.dataService.descriptions, (desc) => {
      return this.stringService.matchPresent(matchText, desc.text, matchOptions);
    });
  }

  this.handleFindTextChange = function() {
    this.matchedHits = [];
    this.currentMatchIndex = undefined;
  }

  this.handleChangedReplaceText = function() {
    var that = this;
    _.each(this.matchedHits, (hit) => {
      hit.modifiedText = that.computeReplacementText(hit.desc.text, this.findText, this.replaceText)
    });
  }

  this.computeReplacementText = function(fullText, findText, replaceText) {
    if (!this.regularExpression) { findText = _.escapeRegExp(findText); }
    var flags = this.ignoreCase ? 'gi' : 'g';
    var regex = new RegExp(findText, flags);
    return fullText.replace(regex, replaceText);
  }

  this.reset = function() {
    this.findSettings = {};
    this.findText = '';
    this.replaceText = '';
    this.matchedHits = [];
    this.currentMatchIndex = undefined;
  }

  this.replaceAndResynth = function(desc, modifiedText) {
    this.descriptionService.setText(desc, modifiedText);
    this.snippetService.sendSnippet(desc, this.dataService.descriptions, this.dataService.transcriptGaps);
  }

  this.replaceAll = function() {
    var that = this;
    _.each(this.includedMatches(), function(match) {
      that.replaceAndResynth(match.desc, match.modifiedText);
    });
  }

  this.includedMatches = function() {
    return _.filter(this.matchedHits, function(match) { return !match.excluded; });
  }

}]);
