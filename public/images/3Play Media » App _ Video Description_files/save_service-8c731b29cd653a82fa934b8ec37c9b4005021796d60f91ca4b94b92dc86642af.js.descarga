var app = angular.module('ViDApp');
app.service('saveService', ['alertService',
                            'dataService',
                            'descriptionService',
                            'domService',
                            'instructionService',
                            '$http',
                            '$location',
                            'phoneticSpellingService',
                            'researchService',
                            'transcriptService',
                            '$uibModal',
                            'validationService',
                            'videoService',
                            '$window',
  function( alertService,
            dataService,
            descriptionService,
            domService,
            instructionService,
            $http,
            $location,
            phoneticSpellingService,
            researchService,
            transcriptService,
            $uibModal,
            validationService,
            videoService,
            $window) {

  this.descriptionService = descriptionService;
  this.instructionService = instructionService;

  // initial get default data from server
  this.getData = function() {
    dataService.descriptions = []
    descriptionService.currentDescriptionIndex = 0;
    var url = $location.absUrl();
    // var reg = /video_description_jobs\/(\d+)\/?/
    var that = this;
    domService.startSpinner('description-table');
    $http({ url: url, method: "GET"
    }).then(function successCallback(response) {
      researchService.clock.savedEdit = response.data.edit_clock;
      researchService.clock.savedGlobal = response.data.global_clock;
      dataService.setData(response);
      that.transmuteData();
      if (!_.isEmpty(response.data.instructions)) {
        instructionService.openInstructionModal();
      }
      dataService.loaded = true;
      console.log("Success: ", response.data);
    }, function errorCallback(response) {
      console.log("Error: ", response);
      var errMsg = response.data.message || response.statusText;
      alertService.addAlert(response.status, errMsg);
    }).finally(function() {
      domService.stopSpinner();
    });
  }

  this.transmuteData = function() {
    dataService.sortData();
    dataService.refreshTitle();
    transcriptService.transmuteTranscript();
    descriptionService.transmuteDescriptions();
    dataService.broadcastUpdateCells();
    phoneticSpellingService.parseAndSetSuggestions();
  }

  this.saveJob = function(options) {
    if (!dataService.loaded) { return false; }
    options = options || {};
    options["shouldFinish"] = options["shouldFinish"] === true;
    var that = this;
    var url = $location.absUrl();
    this.saveOptions = options;
    _.each(descriptionService.descriptions, function(desc){
      descriptionService.evaluateViolations(desc);
    });
    var dirtyDescs = this.getDirtyDescs();
    domService.startSpinner();
    $http({
      url: url,
      method: "PUT",
      data: this.getSaveData(options)
    }).then(function successCallback(response) {
      console.log("Success: ", response);
      dataService.nextJobId = response.data.next_job_id;
      dataService.validationErrors = response.data.errors
      options["hardError"] = response.data.errors.errors.map( error => error.validationType).includes('hard')
      if (dataService.nextJobId && options["fromFinalize"] && options["loadNext"] && !options["hardError"]){ options["redirectToUrl"] = dataService.nextJobId}
      if (dataService.validationErrors.success && options["redirectToUrl"] != null) { $window.location.href = options["redirectToUrl"]};
      researchService.clock.savedEdit = response.data.edit_clock;
      researchService.clock.savedGlobal = response.data.global_clock;
      researchService.clearClocks();
      _.each(dirtyDescs, function(desc) {
        desc.originalData = desc.text;
        desc.dirty = false;
      })
      if (dataService.validationErrors.success) {
        alertService.addAlert(response.status, response.statusText);
      }
    }, function errorCallback(response) {
      console.log("Error: ", response);
      var errMsg = response.data.message || response.statusText;
      if (options["shouldFinish"]){
        dataService.resetPagination();
      }
      alertService.addAlert(response.status, errMsg);
      domService.stopSpinner()
    }).finally(function() {
      if (!dataService.validationErrors.success) {
        validationService.openModal(dataService.validationErrors.errors, options);
      };
      domService.stopSpinner()
    });
  }

  this.getSaveData = function(options) {
    // remove random stuff we've added to desc
    var saveDescriptions = _.map(dataService.descriptions, function (desc, ii) {
      return {text: desc.text, start_time: desc.startTime, audio_snippet_id: desc.snippet && desc.snippet.id, end_time: desc.endTime};
    });
    return {
      start_time: dataService.transcript.startTime,
      end_time: dataService.transcript.endTime,
      descriptions: saveDescriptions,
      edit_clock: researchService.clock.edit,
      global_clock: researchService.clock.global,
      run_validations: options["runValidations"] || false,
      finish_flag: options["shouldFinish"],
      finish_validations: options["fromFinalize"],
      qa_requested: options["qaRequested"],
      phonetic_suggestions: dataService.phoneticSuggestions,
      general_notes: dataService.generalNotes
    };
  }

  this.getDirtyDescs = function() {
    return _.filter(dataService.descriptions, function(desc) {
      return desc.dirty === true;
    })
  }

  this.finishJob = function(saveOptions) {
    saveOptions = saveOptions || {};
    saveOptions["shouldFinish"] = false;
    saveOptions["loadNext"] = saveOptions["loadNext"] || false;
    saveOptions["qaRequested"] = saveOptions["qaRequested"] || false;
    saveOptions["runValidations"] = true;
    saveOptions["fromValidationModal"] = saveOptions["fromValidationModal"] === true;
    saveOptions["redirectToUrl"] = dataService.xappStepUrl || dataService.homeUrl;
    this.saveJob(saveOptions);
  }

  this.exitJob = function() {
    var options = {
      redirectToUrl: dataService.homeUrl
    }
    this.saveJob(options);
  }


  this.openEmergencySaveModal = function() {
    var data = this.currentDescriptionData();
    $uibModal.open({
      ariaLabelledBy: 'modal-title-bottom',
      ariaDescribedBy: 'modal-body-bottom',
      templateUrl: 'emergency-save-modal.html',
      size: 'med',
      resolve: {
        data: function () {
          return data;
        }
      },
      controller: 'EmergencySaveModalInstanceCtrl',
      controllerAs: '$ctrl'
    });
  }

  this.currentDescriptionData = function() {
    var saveDescriptions = _.map(dataService.descriptions, function (desc) {
      return {text: desc.text, start_time: desc.startTime, audio_snippet_id: desc.snippet && desc.snippet.id, end_time: desc.endTime};
    });
    return saveDescriptions;
  }

  this.openFinalizeModal = function(title, body, shouldLoadNext, qaRequested){
    $uibModal.open({
      ariaLabelledBy: 'modal-title-bottom',
      ariaDescribedBy: 'modal-body-bottom',
      templateUrl: 'finalize-modal.html',
      size: 'med',
      resolve: {
        title: function () {
          return title;
        },
        body: function () {
          return body;
        },
        shouldLoadNext: function () {
          return shouldLoadNext;
        },
        qaRequested: function() {
          return qaRequested;
        }
      },
      controller: 'FinalizeModalInstanceCtrl',
      controllerAs: '$ctrl'
    });
  }
}]);
